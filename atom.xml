<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stone's blog on Github Pages]]></title>
  <link href="http://stonekyx.github.io/atom.xml" rel="self"/>
  <link href="http://stonekyx.github.io/"/>
  <updated>2014-05-16T19:28:18+08:00</updated>
  <id>http://stonekyx.github.io/</id>
  <author>
    <name><![CDATA[Stone Kang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ArchLinux Installation Summary]]></title>
    <link href="http://stonekyx.github.io/blog/2014/05/16/archlinux-installation-summary/"/>
    <updated>2014-05-16T19:11:29+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/05/16/archlinux-installation-summary</id>
    <content type="html"><![CDATA[<p>用了一下午时间给一个学弟安装ArchLinux。系统环境是64位CPU，AMD显卡的笔记本电脑，安装在16G、USB 3.0的U盘里。要求安装GNOME，并配置中文输入法和字体。</p>

<p>首先残念的是，U盘虽然是USB 3.0，也插在了USB 3.0的接口上，但速度显然还是很慢。可能是买得太便宜了。</p>

<p>遇到的第一个问题是grub安装报错。其实这里有两种错误，首先是在chroot环境里特有的<code>/run/lvm/lvmetad.socket</code>不存在的问题，ArchWiki上说可以忽略。另外，最后还提示说无法嵌入grub的数据。这是GPT缺少BIOS引导分区的问题，需要在34-2047扇区建立空的引导分区，类型编号为<code>ef02</code>。</p>

<p>引导成功以后，进入登录界面时屏幕卡死，并渐渐变暗。推测是AMD显卡驱动的问题。粗看了一下ArchWiki，把<code>radeon</code>加入到mkinitcpio.conf的MODULES部分，重建并引导以后屏幕直接被关闭，系统卡死。为了节约时间，直接在ISO环境里安装了xorg和GNOME，并在客户系统里用systemctl启用<code>gdm</code>。考虑到xorg带有xf86-video的显示驱动，至少应该能正常引导到图形界面。果然，重启后黑屏，然后恢复，并进入了图形界面。</p>

<p>然后是GNOME里打不开<code>gnome-terminal</code>的问题。在控制台下配置好<code>DISPLAY</code>环境变量运行，提示DBus相关的错误（好像是<code>org.??</code>加载失败）。后来配置了<code>/etc/locale-gen.conf</code>并生成locale之后正常打开。</p>

<p>GNOME安装过程中几次卡死，重启后重新安装，又多次出错，几次反复后成功。中间有一次<code>ldconfig</code>提示说某些<code>.so</code>文件为空，估计是文件系统recover journal的时候将它们重置了。</p>

<p>最后是ibus。安装完ibus和ibus-sunpinyin之后，直接运行是无法输入中文的，因为还需要在<code>.xprofile</code>里设置环境变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export XMODIFIERS="@im=ibus"
</span><span class='line'>export GTK_IM_MODULE="ibus"
</span><span class='line'>export QT_IM_MODULE="ibus"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reply to a Postcard]]></title>
    <link href="http://stonekyx.github.io/blog/2014/05/14/reply-to-a-postcard/"/>
    <updated>2014-05-14T13:23:17+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/05/14/reply-to-a-postcard</id>
    <content type="html"><![CDATA[<p>某天傍晚去上课，在路上两小时内连续遇到大二的组长三次。最后一次是从食堂出来的时候，然后突然被赠送了一袋礼物。回寝室后发现是很喜欢的食物。</p>

<p>今天发现袋中还有张明信片，写得很满，大概是对半年来的收获表示感谢。这是第一次收到这么长的明信片，而且还是表示感谢的。即便是过去的同学从国外寄回的明信片，也没有让我印象这么深刻。</p>

<p>我虽然在这一年里确实有过自己很了不起的感觉，但也知道这样想是不对的。事实上，过去每当我抱有这种心态，就会在不久之后遇到重大的失败，所以一直对这种心态有反射性的危险感。理性地总结，我在EGUI上所做的事不过是“尽责”而已。出于对将来的考虑、项目对我的锻炼价值、和时间上的安排，我能做的也只是尽责。即便如此，我对EGUI的一点点贡献还是先后被赖老师和新入组员肯定，也许就算知道不应该，我还是会为自己感到一点自豪。</p>

<p>其实在4月经历多次面试的挫折之后，我已经慢慢发现自己的诸多不足了，也明显地感觉到，当年无知的同学正在以无法追赶的速度超过我，就像高中的那些同学一样。龟兔赛跑中，兔子只要追赶就不会败给乌龟，而实际上拼命向前跑的兔子满大街都是。看到这副情景，想必我将来还会继续经历一个人的挣扎吧。在那挣扎的途中，如果还能有意无意地帮助一些人，希望这张明信片会是我前进的动力。</p>

<p>现在模糊地想到无数句动漫台词&hellip;可惜我还不能很好地表达出来。</p>

<p>最後のあの言葉がきっと、これからも僕の心を灯しつづけます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EGUI Font Matrix]]></title>
    <link href="http://stonekyx.github.io/blog/2014/05/02/egui-font-matrix/"/>
    <updated>2014-05-02T19:17:10+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/05/02/egui-font-matrix</id>
    <content type="html"><![CDATA[<p>Font Matrix是EGUI表示字体的一种形式。由于要减少对外部库的使用，没办法加载freetype这样的库来读取ttf，所以在EGUI内部直接用二进制点阵的方式保存字体。根据不同的字体大小，共有13个Font Matrix。</p>

<p>之前的写法是直接将13个Font Matrix作为C数组写在代码里，然后编译进二进制库（graph模块，所以是libgraph.so）。但这样会使得代码量显得非常大（超过70000行），而且编译耗时也很长。</p>

<p>对这个部分的改进开始于commit 1118d03，具体做法是将编码Font Matrix的C数组全部作为二进制数据输出到<code>font_matrix_*.dat</code>里，然后在服务器端第一次显示文字时读取这些dat文件。这些数组的空间仍然在代码中进行了定义，所以这将近400k的数据会出现在二进制库的BSS段，并在加载时在内存中分配并清零，直到读取数据文件，其中才会出现数据。</p>

<p>另一种可能的写法是将数组变成指针，然后在读取文件前分配空间。这样可以为不需要字体的情况减少内存使用。</p>

<p>消去之后的代码量为45507行，通过<code>find . \( -name '*.c' -o -name '*.h' \) -exec cat {} \; | wc -l</code>命令统计。当然，代码量什么的只是自我满足而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recent Bugfixes in EGUI]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/28/recent-bugfixes-in-egui/"/>
    <updated>2014-04-28T22:22:19+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/28/recent-bugfixes-in-egui</id>
    <content type="html"><![CDATA[<p>最近在解决别人的一些问题的时候，发现EGUI里的两个小bug。</p>

<p>首先是绘制图片的时候会莫名其妙地崩溃。图片是要绘制在gd里的，而gd有一个独立的工作区域，它与图片的长宽无关。估计以往测试图片没出过问题，是因为gd的工作区域被设置得比图片小。这次有人把它设置成全屏后再画，就直接崩溃了。</p>

<p>调试之后发现是<code>engine_draw_bitmap</code>里循环坐标的时候，没有检查图片的边界，而只检查了gd的工作区域边界。</p>

<hr />

<p>另外一个问题则比较纠结，一张85x64x24的彩色图片，被绘制出来以后是灰色的，而且中间有条纹状的颜色错乱。</p>

<p>这个很果断没有当场调试出来。之后发现是bitmap的格式处理有问题。像素矩阵中每一行的第一个字节都应该要对齐到32位，这是bitmap的规定。之前的代码直接用坐标算出要取的字节位置，所以会漏掉一些对齐位。对于这张24位的图片，每一行会错开一字节，所以出错的颜色呈现有规律的条纹。</p>

<p>比较规范的写法好像是一次读取一行，所以不会遇到这种问题。而EGUI里是一次性读取整个文件。</p>

<hr />

<p>想到之前bitmap的头部信息结构体也出现过字节对齐的bug，写这个部分的人C语言基础可能还不够扎实吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alibaba Interview Summary II]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/27/alibaba-interview-summary-ii/"/>
    <updated>2014-04-27T21:03:57+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/27/alibaba-interview-summary-ii</id>
    <content type="html"><![CDATA[<p>这次二面比较特别，因为是抱着不想过的想法进行的，所以很多地方十分不规矩。仅限于阿里这一次，以后还得按正常的来。</p>

<hr />

<p>这次是三位面试官，其中两个HR，另外一个最后得知是部门的高管。</p>

<p>我在自我介绍的最后发了一通对一面的牢骚，并表明了我自己的观点。实际上这么说完后我就已经知道没法过了。HR一定已经给差评了。最后还是那个高管要我别再纠结一面，才停下来。他后来又说明了一下一面考官的目的，虽然知道是对的，我也没什么心情听，就应付过去了。最后还被当小孩子看待了，对方说这次面的其实就是Linux下的C++开发。这种事情我听都没听说过。</p>

<p>然后是Linux的一些问题。感觉对方也只是随便问了几个，而且是看我那么强调Linux，才放着算法部分不管，只随便考了几个简单的基础Linux题。首先是gcc的参数，我估计列了十几个，然后还忘了优化开关，对方提醒才补上。然后是gdb的基本用法，线程切换，栈状态，调用层切换等命令。</p>

<p>然后是那些项目经验，随便问了一下cmus的东西，什么类型，代码有没有被对方接受什么的。这种问题怎样都无所谓。</p>

<p>接下来问了一个网络编程的题，要求写出服务器的基本调用流程。忘了listen，被对方指出来了。还问了非阻塞方式，回答得比较含糊，然后被训了，说没做过就不要猜。于是老实闭嘴。包括接下来的共享内存、内存映射，虽然多少有些印象，还是说没做过好了。</p>

<p>然后讨论了一下学习方法，我简单阐述之后，对方总结说我是一个<strong>实用主义者</strong>。这算是本次面试的唯一收获了，这个评价估计以后会要长期使用。我挺喜欢。</p>

<p>说到自己有较强学习能力的时候，HR提出反对，说那是应对能力。那倒也是。不过我后来补充了高中系统学习算法的事例，好像HR也没说什么了。</p>

<p>最后是HR的问题，家人什么的，对自己影响最大的人什么的。后面一个问题我说的是我自己，好像情绪比较激动。</p>

<hr />

<p>面试结束的时候也没有任何留恋，拿起水就走。这种公司怎样都无所谓，这是面完阿里之后的感觉。可能也是一面那个人让我印象太差了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rare Loop Syntax in EGUI]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/27/rare-loop-syntax-in-egui/"/>
    <updated>2014-04-27T20:42:36+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/27/rare-loop-syntax-in-egui</id>
    <content type="html"><![CDATA[<p>EGUI代码里有一些比较奇怪的循环语法，比如</p>

<div>
  <pre><code class='cpp'>struct list_node *pos;
list_for_each_macro(&amp;t-&gt;header-&gt;units, pos) {
    if(((struct tab_header_unit*)pos-&gt;data)-&gt;page == new_focus) {
        tab_header_set_focus(t-&gt;header, pos-&gt;data);
        return 0;
    }
}</code></pre>
</div>


<p>这样写的目的是避免为了一小段代码写一个多余的函数。原来为了使用<code>list_for_each</code>函数枚举列表中的元素，必须写一个新的函数，并将它传入<code>list_for_each</code>。</p>

<p>至于<code>list_for_each_macro</code>这种奇怪语法的实现方式，只是利用了一下<code>#define</code>而已。</p>

<div>
  <pre><code class='cpp'>#define list_for_each_macro(list, pos) \
    for((pos)=(list)-&gt;node.next; (pos)!=&amp;(list)-&gt;node; (pos)=(pos)-&gt;next)</code></pre>
</div>


<p>它是利用宏替换隐藏了一个循环。不过由于C语言不能在for后面临时定义循环变量，所以必须由使用者先准备好一个循环变量，也就是那个<code>struct list_node *pos</code>。</p>

<hr />

<p>类似地，还有一个地方利用了这种语法。</p>

<div>
  <pre><code class='cpp'>struct point *pos;
struct bresenham_iterator *it;
bresenham_for_each(pos, it, x1, y1, x2, y2) {
    screen_set_pixel(s, r, c, pos-&gt;x, pos-&gt;y);
}</code></pre>
</div>


<p>bresenham是一个绘制直线的算法，为了方便它在不同地方重复使用，将它从graph模块中提取出来了。在上面的<code>for_each</code>循环里，每一次循环都会得到直线上下一个点的坐标。所以，我们只需要将这个点画出来就行了。</p>

<p>很方便的一点是，枚举器it不需要使用者分配空间，正常使用完后也不需要释放，<code>bresenham_next</code>函数在直线走完之后会自动释放空间。当然，如果使用者从中途break出去了，就需要自己释放了。</p>

<p>至于为什么会同时需要pos和it两个循环变量，是由于bresenham算法的原因。我们把算法的每一步都拆成了独立的函数，所以需要有个地方来存放这些步骤之间的状态。it就是存放这些状态的位置。</p>

<hr />

<p>其实改变C语言的语法并不是很好的做法，只有在不得已的时候才用一下。另外，<code>list_for_each</code>好像在Linux内核里也有类似的用法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alibaba Interview Summary I]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/24/alibaba-interview-summary-i/"/>
    <updated>2014-04-24T21:08:54+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/24/alibaba-interview-summary-i</id>
    <content type="html"><![CDATA[<p>阿里巴巴一面之后，我对阿里这个公司完全失去了兴趣。可能也只是因为面试官和我观点不合的原因吧。但是不得不说我也有失败的地方。</p>

<p>自我介绍的时候说到我的代码量为9~10万行，此时对方好像表示很惊讶。事后来看，这应该是表示不信任的信号，因为我没有说我接触编程的时间。不过这个应对应该是没问题的：我后来说这个代码量中水分很重，因为大部分程序都重写过很多遍，不能正常运行，而且每个程序本身规模也很小。况且，编写的代码量只是一方面，我更需要去阅读别人的优秀代码。此时对方有点头表示赞同。</p>

<p>然后自然是项目经验。其实这个部分的位置记不清楚了，可能实际是在更靠后的位置。说明了对cmus的贡献和学习到的东西。</p>

<p>然后是一个编程题，给定a和b，求a的b次方，两数都是整数，返回值未规定。我的判断是用快速幂，返回值为了尽量精确而选用double。但是后来写的代码误用了递归版本，所以double基本无用，因为递归参数是int，中间结果无法下传。而且还存在b为负数的情况，那样需要先对a取倒再做-b次方。写完代码之后向对方解释这些改进点，对方也表示赞同，没有要求继续编写非递归版本。</p>

<p>然后对方问到我常用的数据结构。首先说到堆，举例在dijkstra算法、排序中使用。此处<strong>废话好像有点多</strong>，想不起来其他用处的话应该保持沉默或停止表述。其次说到线段树，这个对方好像没听过，简单解释了线段树的原理和应用场景。</p>

<p>然后对方问到其他小项目。当场访问了我的github主页，但由于css加载失败，没能看到真正内容。低头思考了一下之后简单介绍了music项目。它是cmus核心部分的重写，目的是学习生产者-消费者线程模型，以及研究原子操作和加锁操作的性能。此处有点<strong>准备不足</strong>，其实我并没有成功地利用到原子操作的高效性。对方好像并不感兴趣。</p>

<p>然后问到我是怎样了解和学习IT领域前沿技术的。我的回答<strong>很模糊</strong>，因为平时并没有特别关注所谓前沿技术。回答的大概内容是，在尝试学习Linux内核代码和内核调试技术，在网上通过查找具体问题的解决方法来慢慢学习。能感觉到对方的不满意。</p>

<p>然后问到是否还有<strong>其他方面</strong>的东西可以展示。我表示不理解这个问题。对方给出的具体解释是，如果阿里现在<strong>不需要</strong>一个做OS底层开发的人，我是否还有别的东西可以展示。思考之后给出的回答是网络编程。要求举例。我举例说明了曾经编写的网络进程监控程序，简单说明原理后，对方表示不满意。</p>

<p>最后，对方给出建议，不要将知识面限制得太窄，这样十分危险。作为本科生要拓宽知识面，因为不像研究生那样有具体的研究方向。我对此建议表示感谢。</p>

<p>然后对方要求我坐到旁边等候。此后，问到我希望去哪个城市，回答说北京和上海，对方表示杭州可能更合适，而且毕业生移居成本很低。征求我同意以后记录了志愿城市为杭州。然后继续在旁边坐着等候。最后对方起立并送我离开。据我所知，这是不很常见的情况。</p>

<hr />

<p>面试之中被提出那样的建议，直到离开面试场所我都还感觉确实是我自己不足。但是回学校路上仔细想之后，觉得我坚持学习和使用Linux长达5年是肯定没有错的。我觉得长时间坚持一件事是远比到处学习要好得多的选择，毕竟计算机领域内各方面的思考方式是有共同之处的。如果能对一个方面了解得比较深入，那么其他方面学习起来也一定很快。</p>

<p>明天上午10点有第二轮面试，我觉得并不希望通过这个第二轮面试，因为阿里已经不是我的绝对首选了。当然，如果通过的话，我是舍不得放开这个机会的，这是个很实际的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slideshow Program Requirements Description]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/22/slideshow-program-requirements-description/"/>
    <updated>2014-04-22T10:06:25+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/22/slideshow-program-requirements-description</id>
    <content type="html"><![CDATA[<p>这是设计模式大作业的需求分析说明。</p>

<hr />

<p>Slideshow是一个简单的幻灯片放映程序，利用SDL实现。从用户编写的幻灯片脚本文件中读取指令，并在窗口中显示简单的图形。暂时不考虑动画的支持。</p>

<p>用户的脚本文件示例如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rect 50 50 100 100
</span><span class='line'>img 300 300 a.jpg
</span><span class='line'>text 0 0 Hello world!
</span><span class='line'>newpage
</span><span class='line'>font Times New Roman
</span><span class='line'>fontsize 72
</span><span class='line'>color 25 25 25
</span><span class='line'>text 20 20 Thanks!
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>上面的示例中共有两张幻灯片，由中间的<code>newpage</code>指令分隔开。第一张上有一个从<code>(50,50)</code>开始的、长宽均为100像素的矩形；一张从<code>(300,300)</code>开始的图片，图片内容是a.jpg；以及<code>(0,0)</code>开始的文字<code>Hello world!</code>。
第二张只有从<code>(20,20)</code>开始的文字<code>Thanks!</code>，字体为<code>Times New Roman</code>，字体大小为72，颜色为<code>#191919</code>。
幻灯片之间的切换由用户操作，程序会在<code>newpage</code>指令处等待用户输入。</p>

<p>由于SDL已经提供了基本的图形操作和文字支持，具体的实现应该十分简单。根据后期上课讲授的设计模式，会考虑再加入新的特性。</p>

<p>理想中的用户脚本示例如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rect 50 50 100 100 fill //This is comment.
</span><span class='line'>img 300 300 a.jpg normal //`normal` can also be `scale` or `tile`.
</span><span class='line'>text 0 0 Hello world!
</span><span class='line'>newpage 10s //Switch to next page in 10 seconds.
</span><span class='line'>polygon 50 50 60 60 60 50 fill //Fills a triangle.
</span><span class='line'>newpage //Don't switch until next user input.
</span><span class='line'>font Times New Roman
</span><span class='line'>fontsize 72
</span><span class='line'>bold
</span><span class='line'>italic
</span><span class='line'>color 25 25 25
</span><span class='line'>text 20 20 Thanks!
</span><span class='line'>line 20 220 420 220 1 //A gray line.
</span><span class='line'>end 1m //Closes the window in 1 minute.</span></code></pre></td></tr></table></div></figure>


<p>同时，用户应该可以在幻灯片播放时用鼠标绘图。这一点借助SDL应该也很容易实现。还可以考虑更复杂的动画、声音，以及用户脚本中的可编程性等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EGUI Bugfix in 0eb4856]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/19/egui-bugfix-in-0eb4856/"/>
    <updated>2014-04-19T18:51:56+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/19/egui-bugfix-in-0eb4856</id>
    <content type="html"><![CDATA[<p>在commit 0eb4856里解决了一个很明显的服务器崩溃bug。这个bug的发生过程如下：启动服务器，然后启动客户端程序<code>multi_windows</code>，待窗口出现以后，在窗口外面的黑色空白处单击鼠标左键，此时服务器会崩溃。</p>

<p>在现在的master分支里直接revert 0eb4856是不能再现这个问题的，因为该commit修改了一些其他的代码，而那些代码的API已经发生变化。要再现这个bug，可以在<a href="http://stonekyx.github.io/attach/0eb4856-revert.patch">这里</a>下载反转patch，在commit 5debfbce的EGUI根目录应用之后即可。初学者想练习gdb的话，建议先不看下面的内容和patch文件的内容，自己找出这个bug。</p>

<hr />

<p>万一以上patch无效，或者不想使用patch，则需要在<code>window_manager/window_manager_input_handler.c</code>里找到<code>mask_active_by_mouse_down</code>函数，并将以下代码注释掉：</p>

<div>
  <pre><code class='cpp'>if(!all_app_traversal_decrement(&amp;iter, _do_find_clicked_window, &amp;msg-&gt;mouse.cursor_position)) {
    /* Clear useless pointers in tainted iter */
    window_info_iterator_clear(&amp;iter);
}</code></pre>
</div>


<p>并加上一行：</p>

<div>
  <pre><code class='cpp'>all_app_traversal_decrement(&amp;iter, _do_find_clicked_window, &amp;msg-&gt;mouse.cursor_position);</code></pre>
</div>


<p>再编译后即可。</p>

<hr />

<p>简单来说，这个bug的原因就是在函数调用失败之后，没有检查错误的返回值，也没有重置失败调用所产生的无效迭代器。其实这也可以说是一个设计缺陷，因为只要后面检查无效迭代器的代码直接依赖这个未clear的值就好了，可惜它依赖的是另外一个值。</p>

<p>这个未重置的值会导致将来在对vector结构操作的时候给出-1的下标，于是就把某个别的指针给覆盖掉了。此后在使用那个指针的时候，会出现无效地址。</p>

<p>那个被覆盖掉的指针是<code>global_wm.application_info_vector.head-&gt;data</code>，不过调试的时候在崩溃地点发现的指针应该不是这个名字，因为那是在一个复杂的迭代函数里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tencent Interview Summary]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/18/tencent-interview-summary/"/>
    <updated>2014-04-18T20:55:15+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/18/tencent-interview-summary</id>
    <content type="html"><![CDATA[<p>HR说最迟今天给通知，于是现在还没给，我就认定二面没有通过了。</p>

<p>这次的技术方面感觉是没什么大问题的，虽然一面时并没有回答出面试官问的很多问题，但总体来说应对上是可以的，而且一面也在进行了整整1小时以后顺利通过了。</p>

<p>二面感觉更加倾向于HR面试。面试官似乎并不是太看重技术，而且对于我的回答也没有作出一个很懂技术的人应有的反应，甚至难以观察他是否满意。从HR的角度分析失败的原因，就十分明显了。我对有些HR问题的回答<strong>太过冗长、拐弯抹角</strong>，导致对方不耐烦，或者不明所以。比如对方问到我期望的工作城市，我根据第一反应解释了不想到北京、上海的原因，然后又转回，说从发展机会考虑还是选择北京或上海。这里明显能观察到对方的不满意。</p>

<p>在二面没有通过的现在，再看最后问的那几个问题，也是很尴尬的。当时满心以为能够通过，于是问到对方所在部门，以及对工作压力的感觉，并陈述了我提出问题的原因：希望了解自己将来工作场所的情况。所以，总结是不应该当场假设通过。一面的时候问的技术问题也许还可以：腾讯内部使用的版本控制方法。</p>

<p><em>Update 2014-04-24:</em> 腾讯二面并没有通过，不过现在好像又可能获得实习offer了，因为腾讯内部名额突然增加了。对方正在等待我的阿里面试结果。可以确定的是，腾讯二面中犯了一个致命错误。对方问到“Linux文件系统的结构”，我给出的回答是关于ext文件系统的内部结构，比如ext怎样避免异常中断造成的数据不一致，以及怎样减少碎片数量等。后来了解到，这个问题实际是关于“filesystem”的问题，也就是Linux系统的<strong>目录</strong>结构。我的回答完全跟问题不着边际。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Details of Framebuffer-drawing Process in EGUI]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/17/details-of-framebuffer-drawing-process-in-egui/"/>
    <updated>2014-04-17T19:52:52+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/17/details-of-framebuffer-drawing-process-in-egui</id>
    <content type="html"><![CDATA[<h2>多分辨率支持问题的解决</h2>

<p>在一年前，EGUI是不能支持<code>1366*768</code>像素分辨率的。实际上，当时的组长要求在运行时通过内核参数将tty的分辨率设置为<code>1024*768</code>。当时的例会上有人说过正在研究怎么解决这个问题，但好像没有下文，所以后来我就自己尝试将它解决了。</p>

<p>实际上解决问题的那个commit是9ed112e，但由于当时git使用不熟，现在在<code>screen_set_pixel.c</code>里blame的话可能是比较难找到这个commit的，因为它被revert过两次。</p>

<p>正如commit message里所说，这个问题的原因是fb里每一行的长度（以字节为单位）并不等于<code>实际像素数*颜色深度位数/CHAR_BIT</code>。之前那种做法会导致每一行都有些数据被写到了fb里的未使用位置上，所以显示就错乱了。换句话说，实际上就是二维数组的第二维长度计算错误。</p>

<p>好在那么长的一个函数里，只有一处需要这个行宽，所以直接改成<code>global_fix_screen_info.line_length</code>即可。</p>

<h2><code>screen_set_pixel</code>等函数的可复用性提升</h2>

<p>这个不能说做得很好，因为只是将一个大函数拆成几个小部分，再加几个省去参数的形式而已。</p>

<p>这么做的目的是，在其他部分的开发中，发现<code>screen_set_pixel</code>只能往screen结构体里绘图实在是太可惜，因为有些时候没办法提供screen结构体（比如<code>screen_cpy_area</code>函数里），或者不需要重新检查边界（比如<code>engine_fill_polygon</code>里）。这种调用频繁的函数，能省下一点时间总是好的。</p>

<p>现在<code>screen_set_pixel</code>已经被拆分成很多种调用方式了，没办法一一说明。这里只介绍一下命名规则。</p>

<ul>
<li><strong><code>_r</code></strong>: 不将绘制结果写到第一个参数给定的对象里，而是写到另外一个里。这样可以防止原始的屏幕数据被破坏，也省去了调用者备份原始数据的必要。</li>
<li><strong><code>_nocheck</code></strong>: 跳过边界检查。一般的调用中都会执行一个矩形边界检查，如果在工作区域外的话就不绘制。但如果调用者已经一次性把所有的像素都检查完了，这里就不用再重复。</li>
<li><strong><code>_raw</code></strong>: 将screen结构体替换成<code>void*</code>。当然这样的话就需要额外给定一些数据才行，包括screen的长度、宽度和色彩深度。</li>
</ul>


<p>上面这三种可以进行必要的组合。实际上各个版本不过是在互相调用而已，最终核心的代码在<code>screen_set_pixel_raw_r_nocheck</code>里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things to Do in Curry]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/14/things-to-do-in-curry/"/>
    <updated>2014-04-14T22:13:17+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/14/things-to-do-in-curry</id>
    <content type="html"><![CDATA[<p>要做的事有三件：</p>

<ol>
<li>迁移数据库到远程服务器</li>
<li>将首页游戏放到独立的js view中，并允许切换subview</li>
<li>登录窗口需要在缩放時仍然处于屏幕中心</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sony Interview Summary]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/09/sony-interview-summary/"/>
    <updated>2014-04-09T19:25:35+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/09/sony-interview-summary</id>
    <content type="html"><![CDATA[<p>其实写这个本身就只是在排遣而已。今天中午收到Sony的拒绝信，虽然礼貌地（应该是吧..）回了一封，但心里毕竟还是过不去。又给Harada发了一封定期汇报，结果心里还是过不去。</p>

<p>Sony的面试是远程会议的形式，三个日本工程师在东京办公室，旁边另有一个日本HR进行翻译。当然他后来也会问一些HR方面的问题。</p>

<p>工程师问的问题大多是项目经验相关的，HR问了申请的目的，以及想去日本的目的（后者估计是我给引出来的）。<strong>感觉工程师们和HR都没怎么听懂我说的话。</strong>这个估计是这次最大的败笔。后来在Sony官网上看到有中国人成功去了日本工作的经验介绍，说语言能力不太重要，但一定要能够清楚地表达。这也确实是个问题。事后，我觉得工程师和HR对我的回答没有反应，并不光是日本人不熟悉英语的问题，更大的原因出自我的表达能力。在面试过程中，有段时间我的注意力被视频会议软件完全吸引了，那段时间根本就不知道自己在说什么，<strong>完全用错词，或者语法完全混乱</strong>。</p>

<p>我想如果能够更清楚地表达我的经验和能力，应该通过面试的概率会高很多。</p>

<p>有点像NOIp之后，或者被Google惨拒之后的感觉。还想多说，但已无语。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real-time Audio Streaming With SDL Audio]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/09/real-time-audio-streaming-with-sdl-audio/"/>
    <updated>2014-04-09T19:09:51+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/09/real-time-audio-streaming-with-sdl-audio</id>
    <content type="html"><![CDATA[<p>SDL虽然不是专门的音频输出系统，但也能帮助进行跨平台的音频输出支持。至少可以期望在Windows上不用为每个版本写一个输出模块了。</p>

<p>SDL2开始支持32位的采样格式，所以在最近的项目里尝试用SDL2来实时输出解码后的音频流。</p>

<p>SDL为音频输出提供的接口很简单，只要设定好采样格式等参数，执行<code>SDL_OpenAudio()</code>，成功以后就可以用<code>SDL_PauseAudio(0)</code>开始播放。播放是在另外一个线程中进行的，所以需要准备一个callback函数，用来被那个线程调用，并填充buffer。通过这种方式，就能比较自由地控制播放了，因为我们虽然刚初始化完就开始播放了，但只要在没有准备好的时候，由callback函数往buffer里填充0即可输出静音。</p>

<p>接下来就是写入真正的音频流了。由于项目里采用了producer-consumer模型，由生产者解码后，音频流必须实时由消费者输出到输出系统里去，也就是说consumer每调用一次<code>player-&gt;write(buf, cnt)</code>，就必须输出一段音乐。当然，是否应该block等待是无所谓的，只要能够在适当的时候卡住consumer，并等待buffer消耗就行。</p>

<p>如果是ALSA，这一点是自动完成的，而且就连API调用部分都直接用cmus的代码了，所以完全不用担心。但是SDL的API调用全部自己写，所以需要处理buffer的问题。SDL并没有提供一个方便的buffer管理接口，而且还有多线程同步的问题，所以我就暂时借用了producer-consumer模型用到的Monitor。这个Monitor实现的是一个泛型的循环队列。每当consumer要写入一段音频流的时候，我们就把它存放到Monitor里，当然也还是一样地用Chunk类型来存。在前面提到的callback函数里，不断从Monitor里提取出一个Chunk，并用它填充SDL给的缓冲区，直到缓冲区填满为止。所以这里其实又是一个小小的producer-consumer模型。而且Monitor本身是支持多线程操作的。</p>

<hr />

<p>但有个问题，SDL跟ALSA配合在一起的时候，会经常发生underrun。这貌似是个已知的问题，几年前网上有人问，但是好像没有有效的解决办法。其实在我本地是有办法解决的，只要去掉ALSA的best-rate resampling就行了。但是这个是我想要使用的，因为它能大大提高音频质量。（当然也可能是心理作用，不过毕竟CPU平均升到30%左右，效果应该是很不错的才对。即便是心理作用，听着也确实舒服。）</p>

<p>暂时还没用OSS、AO或者PulseAudio试过，接下来打算在Windows里试一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conflicts(?) Between ALSA and PulseAudio]]></title>
    <link href="http://stonekyx.github.io/blog/2014/04/07/conflicts-between-alsa-and-pulseaudio/"/>
    <updated>2014-04-07T17:49:47+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/04/07/conflicts-between-alsa-and-pulseaudio</id>
    <content type="html"><![CDATA[<p>在用cmus的代码写播放器的时候，发现在运行PulseAudio的系统上使用ALSA输出会有杂音。这个问题应该是可以通过安装PulseAudio的组件解决的，但是为了临时解决，更快的办法是执行<code>pulseaudio -k</code>来停止PulseAudio的服务。当然，为了正常播放还得确保ALSA安装正常才行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll + Bootstrap]]></title>
    <link href="http://stonekyx.github.io/blog/2014/03/15/jekyll-and-bootstrap/"/>
    <updated>2014-03-15T22:41:00+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/03/15/jekyll-and-bootstrap</id>
    <content type="html"><![CDATA[<p>Jekyll原来的页面效果太少，而且也想练习一下Bootstrap，所以想办法在Jekyll里用上Bootstrap了。</p>

<p>折腾了这么久，最后发现这个早就被实现过了。<a href="http://jekyllbootstrap.com/">Jekyll-Bootstrap</a>貌似就是一个很完整的实现。不过既然都已经折腾出来了，就这样吧。</p>

<p>首先，由于担心Bootstrap里的HTML class跟Jekyll用到的重名，所以将Jekyll所有的class都加上了<code>jekyll-</code>这样的前缀。这样分辨起来也容易一点。不过这里还是用没有前缀的版本来记录。</p>

<p>将文件都复制过来以后，首先要折腾的就是导航栏了。感觉导航栏的HTML结构实在是太复杂，而且很容易就被已有的HTML class影响，还不知道影响来自哪里。</p>

<ul>
<li><p>这次首先遇上的问题是标题按钮跟其他导航按钮不对齐。原因是Jekyll原来用<code>&lt;h1&gt;</code>当标题，放到Bootstrap里之后，它跟一个<code>&lt;ul&gt;</code>当兄弟，由于h1有更多的margin，就出问题了。把h1换成div。</p></li>
<li><p>然后是title这个HTML类的问题。它混在导航栏里之后，会让所在的那个div有特别多的<code>margin-bottom</code>。这样就使得导航栏下面多出一块空白，非常不好看。把title这个类从标签里去掉。</p></li>
<li><p>导航栏那个大div所在的位置也很重要，它的宽度会受到父div的影响。Jekyll里的header原来就是放在一个有site类的容器里，而site是固定宽度的，这就让导航栏没法随着窗口的大小而伸缩了。其实把Bootstrap的container类加在site类后面就行了，然后把Jekyll的main.css里site的<code>width</code>属性名改成<code>max-width</code>。</p></li>
<li><p>怎么感觉Blog Posts这几个字变大了..去看一下。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux + Mono + WinForm == Windows + VC# ?]]></title>
    <link href="http://stonekyx.github.io/blog/2014/03/08/mono/"/>
    <updated>2014-03-08T23:46:00+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/03/08/mono</id>
    <content type="html"><![CDATA[<p>下周一就要C#上机了，但是实在不想在笔记本上安装VS。所以先尽量找了一下Linux下做C#开发的方法，好在很简单。</p>

<p>需要的工具有Monodevelop(IDE)，<a href="https://github.com/mono/mwf-designer.git">WinForm</a>（是个独立的工具，创建VS窗体）。Mono的编译命令是mcs，执行二进制文件有时会加上mono（像解释器一样），但这个好像不一定需要。所以实际上创建好项目以后用vim也是没问题的。</p>

<p>在Monodevelop里创建的窗体项目一般是GTK的，虽然没有尝试过在GTK项目里添加WinForm窗体，但我想这样应该也没什么问题。总之创建了一个<strong>空项目</strong>，然后在WinForm里新建了一个Form1.cs，画了个窗体，保存。导入到Monodevelop里之后发现无法编译，原因是一些assembly没有引用。在Project菜单里有个Edit references，打开后选择System等相关的引用即可。</p>

<p>运行的时候还有个问题，中文默认是无法显示的。我用的系统locale是<code>en_US.UTF-8</code>，虽然同是UTF-8，但如果不设成<code>zh_CN.UTF-8</code>就不行。这个也许跟VS项目的配置文件有关系，因为写了中文的这个项目是用VS创建的。但也可能是类似于gettext的问题，设置了中文文本，没有设置英文文本，不然同是UTF-8应该是兼容的才对。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Egui Client Message Dispatching]]></title>
    <link href="http://stonekyx.github.io/blog/2014/03/05/egui-client-message-dispatching/"/>
    <updated>2014-03-05T00:00:00+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/03/05/egui-client-message-dispatching</id>
    <content type="html"><![CDATA[<!DOCTYPE html>

<html>
<head>
  <title>exec.c</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, target-densitydpi=160dpi, initial-scale=1.0; maximum-scale=1.0; user-scalable=0;">
  <link rel="stylesheet" media="all" href="http://stonekyx.github.io/css/docco.css" />
</head>
<body>
  <div id="container">
    <div id="background"></div>
    
      <ul id="jump_to">
        <li>
          <a class="large" href="javascript:void(0);">Jump To &hellip;</a>
          <a class="small" href="javascript:void(0);">+</a>
          <div id="jump_wrapper">
          <div id="jump_page">
            
              
              <a class="source" href="../egui-button-callback/">
                button.c
              </a>
            
              
              <a class="source" href="../egui-client-message-dispatching/">
                exec.c
              </a>
            
          </div>
        </li>
      </ul>
    
    <ul class="sections">
        
          <li id="title">
              <div class="annotation">
                  <h1>exec.c</h1>
              </div>
          </li>
        
        
        
        <li id="section-1">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-1">&#182;</a>
              </div>
              <p>这部分代码摘自application/exec.c，是用户程序接收到服务器的消息时首先进行的过程。这里只摘取了处理鼠标按下的代码。调用顺序是从下往上，监听函数收到消息后分析消息类型，然后首先传给handle_mouse_press。请从那里开始读。</p>

            </div>
            
        </li>
        
        
        <li id="section-2">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-2">&#182;</a>
              </div>
              <p>这是检查并处理具体控件的函数。如果控件位于鼠标下方，那么它就是要找的控件，于是处理并返回它的指针；不是的话就返回NULL。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre><span class="hljs-keyword">static</span> <span class="hljs-keyword">struct</span> widget* do_dispatch_mouse_event_and_returns(
        <span class="hljs-keyword">struct</span> widget* w, <span class="hljs-keyword">union</span> message* msg)
{
    <span class="hljs-keyword">struct</span> rectangle area;</pre></div></div>
            
        </li>
        
        
        <li id="section-3">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-3">&#182;</a>
              </div>
              <p>前面这几行是为了获得这个控件在屏幕上的坐标。除了窗口以外的控件都只保存与父控件的相对坐标，所以需要计算一下绝对坐标。因为鼠标位置是绝对坐标的。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="hljs-keyword">if</span>(w-&gt;is_window == <span class="hljs-number">1</span>) {
        area = w-&gt;area;
    } <span class="hljs-keyword">else</span> {
        widget_absolute_area(w, &amp;area);
    }</pre></div></div>
            
        </li>
        
        
        <li id="section-4">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-4">&#182;</a>
              </div>
              <p>这之后就只要判断一个点是否在矩形内部即可。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="hljs-keyword">if</span>(msg-&gt;mouse.cursor_position.x &gt;= area.x 
        &amp;&amp; msg-&gt;mouse.cursor_position.x &lt;= area.x + area.width - <span class="hljs-number">1</span> 
        &amp;&amp; msg-&gt;mouse.cursor_position.y &gt;= area.y 
        &amp;&amp; msg-&gt;mouse.cursor_position.y &lt;= area.y + area.height - <span class="hljs-number">1</span>) {</pre></div></div>
            
        </li>
        
        
        <li id="section-5">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-5">&#182;</a>
              </div>
              <p>这个控件就在鼠标下方，所以将消息传给它并返回。这个callback就是平常见到的控件里那个callback指针。如果用户程序改动了它，那么用户的函数就会被调用。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        <span class="hljs-keyword">if</span>(w-&gt;callback != NULL) {
            w-&gt;callback(w, msg);
        }
        application_update_keybd_focus(w);
        <span class="hljs-keyword">return</span> w; 
    }
    <span class="hljs-keyword">return</span> NULL;
}</pre></div></div>
            
        </li>
        
        
        <li id="section-6">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-6">&#182;</a>
              </div>
              <p>这个函数名字好长..而且单词还拼错了。它的作用是判断每个控件是否处于鼠标的下方。它需要两个参数，一个是函数指针，指向要对找到的控件进行处理的函数；另一个是事件消息。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre><span class="hljs-keyword">static</span> <span class="hljs-keyword">struct</span> widget* application_widgets_for_each_decreament(</pre></div></div>
            
        </li>
        
        
        <li id="section-7">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-7">&#182;</a>
              </div>
              <p>第一个参数的类型应该这样读：do_for_each_widget是个指针，指向函数，函数接收两个参数并返回<code>struct widget*</code>。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        <span class="hljs-keyword">struct</span> widget* (*do_for_each_widget)(
            <span class="hljs-keyword">struct</span> widget*, <span class="hljs-keyword">union</span> message*),
        <span class="hljs-keyword">union</span> message* msg)
{
    <span class="hljs-keyword">int</span> n, i;
    <span class="hljs-keyword">struct</span> object *tree, *node;</pre></div></div>
            
        </li>
        
        
        <li id="section-8">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-8">&#182;</a>
              </div>
              <p>global_application保存整个用户程序的信息，它的window_vector成员包含所有窗口的指针（没记错的话）。于是n应该就是窗口的个数。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    n = vector_size(&amp;(global_application.window_vector));</pre></div></div>
            
        </li>
        
        
        <li id="section-9">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-9">&#182;</a>
              </div>
              <p>循环每个窗口。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="hljs-keyword">for</span>(i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; -- i) {</pre></div></div>
            
        </li>
        
        
        <li id="section-10">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-10">&#182;</a>
              </div>
              <p>取得窗口的指针。实际上它是一棵树，树的节点是窗口里的控件。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        tree = vector_at(&amp;(global_application.window_vector), i);</pre></div></div>
            
        </li>
        
        
        <li id="section-11">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-11">&#182;</a>
              </div>
              <p>在这棵控件树里，左节点是兄弟，右节点是真正的子节点，以此来用二叉树表示一个多叉树。不过实际的规则比这个还复杂，将来再说。node应该能理解成控件树的第一个节点。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        node = tree-&gt;rchild;
        <span class="hljs-keyword">while</span>(node != NULL) {</pre></div></div>
            
        </li>
        
        
        <li id="section-12">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-12">&#182;</a>
              </div>
              <p>有控件的话就继续，将消息传递给控件树的节点。这次调用里收到的处理函数是do_dispatch_mouse_event_and_returns（见下面的handle_mouse_press）。它如果发现这个控件是要找的控件，就会返回它的指针，否则返回NULL。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>            <span class="hljs-keyword">if</span>(do_for_each_widget(WIDGET_POINTER(node), msg)) {</pre></div></div>
            
        </li>
        
        
        <li id="section-13">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-13">&#182;</a>
              </div>
              <p>如果找到了那个控件，处理完之后就直接返回。这个不是就继续循环控件树。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>                <span class="hljs-keyword">return</span> WIDGET_POINTER(node);
            }</pre></div></div>
            
        </li>
        
        
        <li id="section-14">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-14">&#182;</a>
              </div>
              <p>这个object_tree_iterator_decrement函数可以实现非递归地遍历这棵树，也就是返回node之后的下一个应该遍历的节点。在for循环里就相当于<code>i++</code>的作用。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>            node = object_tree_iterator_decrement(tree, node);
        }
    }
    <span class="hljs-keyword">return</span> NULL;
}</pre></div></div>
            
        </li>
        
        
        <li id="section-15">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-15">&#182;</a>
              </div>
              <p>处理鼠标按下的事件。接收到监听函数传来的事件消息之后，它需要通过某种机制将消息发给合适的控件。对于鼠标按下这个事件，应该接收的控件是鼠标下方的那个。这就交给application_widgets_for_each_decreament处理了。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre><span class="hljs-keyword">static</span> si_t handle_mouse_press (<span class="hljs-keyword">union</span> message * msg)
{
    application_widgets_for_each_decreament(
            do_dispatch_mouse_event_and_returns, msg);
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</pre></div></div>
            
        </li>
        
    </ul>
  </div>
</body>
</html>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Egui Button Callback]]></title>
    <link href="http://stonekyx.github.io/blog/2014/03/05/egui-button-callback/"/>
    <updated>2014-03-05T00:00:00+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/03/05/egui-button-callback</id>
    <content type="html"><![CDATA[<!DOCTYPE html>

<html>
<head>
  <title>button.c</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, target-densitydpi=160dpi, initial-scale=1.0; maximum-scale=1.0; user-scalable=0;">
  <link rel="stylesheet" media="all" href="http://stonekyx.github.io/css/docco.css" />
</head>
<body>
  <div id="container">
    <div id="background"></div>
    
      <ul id="jump_to">
        <li>
          <a class="large" href="javascript:void(0);">Jump To &hellip;</a>
          <a class="small" href="javascript:void(0);">+</a>
          <div id="jump_wrapper">
          <div id="jump_page">
            
              
              <a class="source" href="../egui-button-callback/">
                button.c
              </a>
            
              
              <a class="source" href="../egui-client-message-dispatching/">
                exec.c
              </a>
            
          </div>
        </li>
      </ul>
    
    <ul class="sections">
        
          <li id="title">
              <div class="annotation">
                  <h1>button.c</h1>
              </div>
          </li>
        
        
        
        <li id="section-1">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-1">&#182;</a>
              </div>
              <p>这部分代码摘自widget/button/button.c，是按钮控件的默认callback。它一般被application/exec.c里的过程调用。那边的代码可以通过右上角的Jump跳转过去。</p>

            </div>
            
        </li>
        
        
        <li id="section-2">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-2">&#182;</a>
              </div>
              <p>这次要实现的事件处理功能，是在widget.c里写，这里改动不会太大。而且那边的写法也会跟这个不一样，因为那边要处理所有存在的消息，当然不能像这样用switch枚举。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>
si_t button_default_callback(addr_t self, addr_t msg)
{
    <span class="hljs-keyword">struct</span> button * b = self;
    <span class="hljs-keyword">union</span> message * m = msg;</pre></div></div>
            
        </li>
        
        
        <li id="section-3">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-3">&#182;</a>
              </div>
              <p>union message的base.type成员保存了消息的类型。按钮控件只处理了几种必要的消息，而没有考虑鼠标点击之类的事件，所以现在用户都需要自己重新实现一个callback函数来处理。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="hljs-keyword">switch</span>(m-&gt;base.type) {</pre></div></div>
            
        </li>
        
        
        <li id="section-4">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-4">&#182;</a>
              </div>
              <p>重绘事件。由于某种原因，这个控件所在位置的图形被扰乱了，需要重新绘制时出现的消息。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        <span class="hljs-keyword">case</span> MESSAGE_TYPE_WIDGET_REPAINT:
            button_default_widget_repaint(b, m);
            button_default_widget_show(b, m);
            <span class="hljs-keyword">break</span>;</pre></div></div>
            
        </li>
        
        
        <li id="section-5">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-5">&#182;</a>
              </div>
              <p>申请服务器将图像显示出来。这个消息单独出现的情况好像比较少，一般都是重绘之后才需要申请服务器显示，而这个是上面的消息附带处理的。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        <span class="hljs-keyword">case</span> MESSAGE_TYPE_WIDGET_SHOW:
            button_default_widget_show(b, m);
            <span class="hljs-keyword">break</span>;</pre></div></div>
            
        </li>
        
        
        <li id="section-6">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-6">&#182;</a>
              </div>
              <p>鼠标按下。按下时按钮会改变外观，比如颜色变深，所以也需要重新显示。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        <span class="hljs-keyword">case</span> MESSAGE_TYPE_MOUSE_PRESS:
            button_default_mouse_press(b, m);
            button_default_widget_show(b, m);
            <span class="hljs-keyword">break</span>;</pre></div></div>
            
        </li>
        
        
        <li id="section-7">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-7">&#182;</a>
              </div>
              <p>跟上面一样，松开时外观要恢复到按下前的样子。</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>        <span class="hljs-keyword">case</span> MESSAGE_TYPE_MOUSE_RELEASE:
            button_default_mouse_release(b, m);
            button_default_widget_show(b, m);
            <span class="hljs-keyword">break</span>;

        <span class="hljs-keyword">default</span>:
            <span class="hljs-keyword">break</span>;
    }

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</pre></div></div>
            
        </li>
        
    </ul>
  </div>
</body>
</html>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EGUI模块结构]]></title>
    <link href="http://stonekyx.github.io/blog/2014/03/04/egui-modules/"/>
    <updated>2014-03-04T22:17:00+08:00</updated>
    <id>http://stonekyx.github.io/blog/2014/03/04/egui-modules</id>
    <content type="html"><![CDATA[<div class="mxgraph" style="position:relative;left:50%;overflow:hidden;width:592px;height:335px;margin-left:-296px;"><div style="width:1px;height:1px;overflow:hidden;">7Vtbj+o2EP41+9iKkHDZx7P00L5UqrQPbZ9WXmKCVSdGSVjY8+uPTWaCL4HlEpxIBQmJjInj+fx5/M0YnsJZuvs9J+vVnyKm/Gk4SHIWP4W/PQ2HgXwrw4bFtDBMpRC8ZGvTuBBZRhelYVsKbna2Jgl1DK8Lwl3r3ywuV2ANxs+Hhj8oS1bwnOlwXDUU5Sf2EdMl2fDyl71JtqnmlGBfg8qwG0DXEfT8CYYpdLgmmTGkH0KkhiGnBfthDnvJYFjwkHeRxzQ3TJxl/+m4hd/lFORCyBvVp3Q3o1xNA05Cddv8SGsNV04z49HHbgA4PgjfwNC3LIvF9i0lmYQ2d8CUt8uJlhcv2xUr6euaLFTLVlJG2paM85ngovIxnMnXfO6OCYb5QfOS7mznJf+oSGmZf6ppgdZngOuzusbLrcaJCGwrjQ7hqLIRgDipez5gIj8ALM0QRQ5EMX3fJBchczsC4chEYDr5FXzTMJjcCQLoQoOAfihXbAi8UsICpL7W8ECa6HggTW7BA0KChkdBczn0N87ezwDldudrLzpwfuI4n6j9olMyhGF3eEwdPBYiTb3QIHiGlQluDz26Hbhbx4yzfVQYFFIhOAAUW5Zykt0rQEZ2PMCopWHRCEYwaCFCgmjQwCDrNWcLUjKRXcUFhPd8Mpj++6QC9GGoiDihV20Q87mKCu0A0h0iSF8tKOwXx9U7xOXeW5LJo/ehuz+6akny4xUuRV6uRCIywr8frC90x8p/ZOtACp3q6l91pT5nckBak7qs2o7iVohNvof3sFZLkiuKGgxWozoJri44kV5mMAFjTrlc+x9mPtAEKjzjL8H2oROjF/aDt1QOwLd0QY832qTHGys3nRu/5TlRDuHX1uoLRcOAoN+RudOAqjw6iujU1+WH6vEHNtUQn0cwV4P0nWDAgAfB2iFYndbch2CRG79vIthEZ1hgMkzqFI1iDRl8E8UwYP2/OXbNzLq5LCxXbWrlFiuheCGcJaros5BToco2L2r3lZqOf4OGlMXxfqbb2LCt/TocNiT4WDXSZwttN9U43CIHMqxrWIIJJFhd4BK4yd2mZHwfxnwmN6GV74e4QDQMwmkDCGi7CYSwIcNVev0aHYuAXpvWYKLvQ8Q3VP5ISd6KMt8syo2s9/pCoDsI3GhpdHN/3+2o6NF3N4uRRxpLlrxJl2S9zw8A9Qr2DwA+qi0RVAmdZhFUCaRTIgiQM0QQzJAhgmDRPoT2MaEdDiCeWwM8Oo6xuQFb3789mXNjTM9oBpQyaAYYPmh2jGbB8DKaWTKvbZYFboX2JMsKmqSSFV/XCyyGfVkvcPkF/NfpBVh0z64jBw2hLa7PZdvQ7gg3r7bZZ5+M2Ofg9rgsgW19/2b6IV49pF/DJto3+tXFawwONmuupV/dccv0G057Rr+W99jjDDT4h5n6FwwEuhn7a28o2ONaVsPvEO6mnK4ILFjreczrpYrYPVq/ZV71ww1NAau2epKrRgwTV0zsY17PmFe3oOTpVOG8BQunao/1eumZghuHMY1st3h+afFoNDZlSNRQNr7bkYJ7RguWjkGJrN+KeQXFPU9wf6/cCVPQOxSgeE7mAxQ3NYeHdwxK6CSR/kDBxEQDBXaPjkGxU5W6FOADFPdYHopMXTPFSlBrb32A4qpFV1Z0whQ7CcYfWvoAxT2zRMHTLSiBFG1dgRI1gNIPVMbWntx0zHU3qlyoyjOxP+anWSxrMmJ7sMSkWFHV6emKyEHB779XZ2bn5V5NGh3G25tyXTS2ynWD+s8ql6r2kdWV01F7Kh5/gKavjn4E0sgSZwEOtf3VIS8Pfz6rQDz8GTD8/hM=</div></div>


<script type="text/javascript" src="https://www.draw.io/embed.js"></script>


<p>用数字标出了模块之间的依赖关系。
Client side是用户端模块的集合，这三个模块对外的依赖关系就统一表示了，另外内部依赖关系也很紧密。除了<code>client_lib</code>以外基本上不能完全独立。<code>utils</code>也是，它们对外在被依赖上地位和机会基本一样，也就是说别的模块只要依赖了utils中的任意一个，那么依赖其他几个也是很自然的（这不是约束条件，只是经常出现的情况）。</p>

<ol>
<li><code>event</code>依赖<code>comm</code>，很明显的一个原因就是<code>event</code>里要产生基本的消息。消息类型是在<code>comm</code>里定义的。</li>
<li><code>server_lib</code>依赖<code>comm</code>，这个更显然了，<code>server_lib</code>里面都是对<code>comm</code>里定义的消息的处理，比如针对不同的消息类型，调用不同的服务器端函数进行操作。</li>
<li>Client side依赖<code>comm</code>，因为客户端要跟服务器通信，也是要靠消息的。<code>client_lib</code>就跟<code>server_lib</code>基本上一样，也是针对各种消息的处理，所以也是大量地依赖<code>comm</code>。</li>
<li><code>comm</code>里有些处理需要用到消息队列，这时就会对<code>data_structures</code>产生依赖。</li>
<li><code>graph</code>在绘制图形的时候，至少也需要用到<code>color</code>里定义的颜色结构体和透明处理函数。</li>
<li>Client side里<code>widget</code>也经常用到队列之类的结构（<code>data_structures</code>），以及被客户端广泛需要的<code>color</code>。</li>
<li><code>data_structures</code>里有鼠标指针结构，它会用到<code>color</code>，因为鼠标是彩色的。如果把<code>utils</code>看作一个模块的话，这就变成内部依赖了。</li>
<li><code>config_parser</code>用来从统一格式的配置文件中读取参数。来自<code>data_structures</code>的vector被用来存储读入的配置项。</li>
<li><code>application</code>会在接收到消息的时候向合适的<code>widget</code>转发，转发的方式就是通过<code>widget</code>的callback函数。</li>
<li><code>application</code>的很多操作需要跟服务器通信。客户端跟服务器通信的方式就是通过<code>client_lib</code>里的函数。</li>
<li>原因跟上面类似，<code>widget</code>要控制控件的绘制，而它本身没有绘图的权限，所以需要通过<code>client_lib</code>向服务器发出请求。</li>
</ol>


<p>总的来说，<code>utils</code>里的模块被依赖的几率应该是最高的，同时也不太依赖别的模块。</p>

<p>另外还有两个特别的、用椭圆表示的模块，它们在编译后生成可执行文件，而不是库文件。<code>debug</code>里的代码生成若干客户端程序，<code>window_manager</code>生成一个大的服务器程序。</p>
]]></content>
  </entry>
  
</feed>
